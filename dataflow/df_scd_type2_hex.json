{
	"name": "df_scd_type2_new",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_scd2_source",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_scd_type2_new_sql",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_scd_type2_new_sql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_scd_type2_new_sql",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnSourceHash"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumnSqlHash"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as short,",
				"          NAME as string,",
				"          CITY as string,",
				"          START_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          ID as integer,",
				"          NAME as string,",
				"          CITY as string,",
				"          Start_date as date,",
				"          End_date as date,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(SourceHash = md5(ID,NAME,CITY)) ~> derivedColumnSourceHash",
				"source2 filter(isActive ==1) ~> filter1",
				"filter1 derive(SqlHash = md5(ID,NAME,CITY)) ~> derivedColumnSqlHash",
				"derivedColumnSourceHash, derivedColumnSqlHash exists(SourceHash == SqlHash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(End_date = 'NULL',",
				"          isActive = 1) ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
				"derivedColumnSqlHash, derivedColumnSourceHash exists(source2@ID == source1@ID",
				"     && source2@NAME == source1@NAME,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2 derive(End_date = toDate(currentUTC()),",
				"          isActive = 0) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(true())) ~> alterRow2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          NAME as string,",
				"          CITY as string,",
				"          Start_date as date,",
				"          End_date as date,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ID','NAME','CITY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          NAME as string,",
				"          CITY as string,",
				"          Start_date as date,",
				"          End_date as date,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ID','NAME'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}