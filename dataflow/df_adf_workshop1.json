{
	"name": "df_adf_workshop1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_Parquet_cases",
						"type": "DatasetReference"
					},
					"name": "source1cases"
				},
				{
					"dataset": {
						"referenceName": "ds_parquet_colAdd_hospital",
						"type": "DatasetReference"
					},
					"name": "source2hospital"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_cleansed_parquet_cases_hospital",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1",
					"description": "Adding new key sequence_ID starting from 1 with step 1"
				},
				{
					"name": "surrogateKey2",
					"description": "Adding new key sequence_ID starting from 1 with step 1"
				},
				{
					"name": "cast2hospital"
				},
				{
					"name": "join1"
				},
				{
					"name": "cast1cases"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as string,",
				"          indicator as string,",
				"          daily_count as string,",
				"          date as string,",
				"          rate_14_day as string,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1cases",
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as string,",
				"          year_week as string,",
				"          value as string,",
				"          source as string,",
				"          url as string,",
				"          current_dateTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source2hospital",
				"source1cases keyGenerate(output(sequence_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"source2hospital keyGenerate(output(sequence_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey2 cast(output(",
				"          date as date,",
				"          value as integer,",
				"          current_dateTime as date",
				"     ),",
				"     errors: true) ~> cast2hospital",
				"cast1cases, cast2hospital join(cast1cases@date == cast2hospital@date,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"surrogateKey1 cast(output(",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double",
				"     ),",
				"     errors: true) ~> cast1cases",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}